import re

c = []
with open("example", "r") as ex:
    c = ex.read()

cs, *cb = c.split("\n\n")

seq = list(map(lambda n: int(n), cs.split(",")))

def ints(s):  # thanks mserrano
    return list(map(int, re.findall(r"(?:(?<!\d)-)?\d+", s)))
def pboard(b):
    return [ints(l) for l in b]

boards = [pboard(b) for b in cb]

def parseBoards(l):
    r = []
    for i in range(len(l) // 5):
        r_ = []
        offset = i*6
        for l_ in l[offset+1:offset+6]:
            r_ += [[int(x) for x in l_.replace("  ", " ").strip().split(" ")]]
        r += [r_]
    return r


def updateLine(line, number):
    return [e if e != number else 0 for e in line]

def updateBoard(board, number):
    return [updateLine(l, number) for l in board]

def updateBoards(boards, number):
    return [updateBoard(board, number) for board in boards]

def findWinningBoards(boards):
    for b in boards:
        for l in b:
            if len(l) == 0:
                return b
    return None

#test = [[[13, 17, 11, 0], [999], [21, 9, 14, 16, 7], [6, 10, 3, 18, 5], [1, 12, 20, 15, 19]], [[3, 15, 0, 2], [9, 18, 13, 17, 5], [19, 8, 7, 25, 23], [20, 11, 10, 24, 4], [14, 21, 16, 12, 6]], [[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [11, 13, 6, 5], [2, 0, 12, 3, 7]]]
#print(findWinningBoards(updateBoards(test,999)))


def runSeq(seq, boards):
    b = boards
    for i in range(len(seq)):
        b = updateBoards(b, seq[i])
        if findWinningBoards(b) != None:
            return (i, seq[:i], findWinningBoards(b))
    return (None,None,None)
print(boards)

(i, seq2, b) = runSeq(seq, boards)
print("$$$$$$$$", i, seq2, b)
res = (sum([sum(l) for l in b]))

print(res*seq[i])

